import telebot
from telethon import TelegramClient
import asyncio
import os
import re
from collections import Counter
from datetime import datetime

API_TOKEN = '6911931516:AAHYBsAlbuYYicgn7YnDZkkEMlWsg1nH9ow'
api_id = '20422415'
api_hash = 'a0b33af22b30ce389e6705a0d3a98347'
phone = '+33 7 66 86 88 34'

bot = telebot.TeleBot(API_TOKEN)
client = TelegramClient('session_name', api_id, api_hash)

# –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
button_labels = [
    "Phoenix", "Tucson", "Scottdale", "Chandler", "Brainburg",
    "SaintRose", "Mesa", "RedRock", "Yuma", "Surprise",
    "Prescott", "Glendale", "Kingman", "Winslow", "Payson",
    "Gilbert", "Show Low", "Casa-Grande", "Page", "Sun-City",
    "Queen-Creek", "Sedona", "Holiday", "Wednesday", "Yava",
    "Faraway", "BumbleBee", "Christmas", "Mirage", "Love"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def create_buttons():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=5)
    buttons = [telebot.types.KeyboardButton(text=label) for label in button_labels]
    markup.add(*buttons)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = create_buttons()
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text in button_labels)
def handle_query(message):
    label = message.text
    number = button_labels.index(label) + 1  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–Ω–æ–ø–∫–∏
    asyncio.run_coroutine_threadsafe(run_main_with_param(number, label, message.chat.id), asyncio.get_event_loop())
    bot.send_message(message.chat.id, f'–§–∞–π–ª –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {number} ({label}) —Å–æ–∑–¥–∞–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.')

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
async def main(param, label, chat_id):
    await client.start(phone=phone)
    print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ù–∞–π—Ç–∏ –±–æ—Ç–∞
    bot_entity = await client.get_entity('https://t.me/ARZMonitoring_bot')

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start
    await client.send_message(bot_entity, '/start')
    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

    # –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é –í–ª–∞–¥–µ–ª—å—Ü–µ–≤ üë•"
    await client.send_message(bot_entity, '–ú–µ–Ω—é –í–ª–∞–¥–µ–ª—å—Ü–µ–≤ üë•')
    await asyncio.sleep(1)

    # –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫—É üß©"
    await client.send_message(bot_entity, '–ü–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫—É üß©')
    await asyncio.sleep(1)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    await client.send_message(bot_entity, f'{param} 2 0-500')
    await asyncio.sleep(4)

    # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 7 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
    messages = []
    async for message in client.iter_messages(bot_entity, limit=7):
        messages.append(message.text)

    filename = f'{label}.txt'
    with open(filename, 'w', encoding='utf-8') as f:
        for message in reversed(messages):  # –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            f.write(message)

    print(f"–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")
    output_file = process_file(filename,label)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Ñ—É–Ω–∫—Ü–∏–µ–π process_file
    await send_file(chat_id, output_file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
def process_file(file_path,lable):
    # –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()

    # –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Å –∏–º–µ–Ω–∞–º–∏ –∏ —Ç–∏–ø–∞–º–∏ –±–∏–∑–Ω–µ—Å–∞
    names_and_types = []
    for line in lines:
        match = re.search(r'\|\s*(.*?)\s*\|\s*(.*?)\s*\|\s*(.*?)\s*\|', line)
        if match:
            business_type = match.group(1).strip()
            num = match.group(2).strip()
            name = match.group(3).strip()
            names_and_types.append((name, business_type, num))
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É: {line}")

    # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –∏–º–µ–Ω–∏ –±–µ–∑ —É—á—ë—Ç–∞ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
    name_counts = Counter(name for name, _, _ in names_and_types)

    # –°–æ–∑–¥–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    current_datetime = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_file = f"{lable}_{current_datetime}.html"

    with open(output_file, 'w', encoding='utf-8') as file:
        file.write('<!DOCTYPE html>\n')
        file.write('<html>\n')
        file.write('<head>\n')
        file.write('<title>BizCheck by monejey</title>\n')
        file.write('<link href="https://fonts.googleapis.com/css2?family=Golos+Text:wght@400;700&display=swap" rel="stylesheet">\n')
        file.write('<style>\n')
        file.write('body { background-color: #2e2e2e; color: #f2f2f2; font-family: "Golos Text", Arial, sans-serif; }\n')
        file.write('.filters { margin-bottom: 5px; }\n')  # Reduced margin-bottom
        file.write('table { margin-top: 0; }\n')  # Ensure no top margin for the table
        file.write('table { width: 100%; border-collapse: separate; border-spacing: 0; margin-top: 20px; border-radius: 10px; overflow: hidden; }\n')
        file.write('.header { font-size: 24px; font-weight: bold; margin-bottom: 10px; }\n')  # Added styles for header
        file.write('th, td { border: 1px solid #444; text-align: left; padding: 8px; }\n')
        file.write('th { background-color: #444; color: #f2f2f2; }\n')
        file.write('tr:nth-child(even) { background-color: #3e3e3e; }\n')
        file.write('tr:nth-child(odd) { background-color: #2e2e2e; }\n')
        file.write('span.copyable { cursor: pointer; color: #ffffff; }\n')
        file.write('.checked { color: white; visibility: hidden; font-size: large; }\n')
        file.write('.filters { display: flex; justify-content: space-between; align-items: center; margin-top: 20px; }\n')
        file.write('label { margin-right: 10px; }\n')
        file.write('select, input { background-color: #3e3e3e; color: #f2f2f2; border: 1px solid #444; border-radius: 5px; padding: 5px; margin: 5px; }\n')
        file.write('.contact-link { position: absolute; top: 10px; right: 10px; color: #f2f2f2; text-decoration: none; font-weight: bold; background-color: #444; padding: 5px 10px; border-radius: 5px;}')
        file.write('.contact-link:hover { background-color: #666;}')
        file.write('</style>\n')
        file.write('<script>\n')
        file.write('function applyFilters() {\n')
        file.write('    var minId = parseInt(document.getElementById("minId").value) || 0;\n')
        file.write('    var maxId = parseInt(document.getElementById("maxId").value) || Infinity;\n')
        file.write('    var filterValue = document.getElementById("filter").value;\n')
        file.write('    var rows = document.querySelectorAll("table tr:not(:first-child)");\n')
        file.write('    var nameCounts = {};\n')
        file.write('    var visibleRows = [];\n')
        file.write('    for (var i = 0; i < rows.length; i++) {\n')
        file.write('        var idCell = parseInt(rows[i].querySelectorAll("td")[0].textContent);\n')
        file.write('        var nameCell = rows[i].querySelectorAll("td")[2].textContent;\n')
        file.write('        if (idCell >= minId && idCell <= maxId) {\n')
        file.write('            nameCounts[nameCell] = (nameCounts[nameCell] || 0) + 1;\n')
        file.write('        }\n')
        file.write('    }\n')
        file.write('    for (var i = 0; i < rows.length; i++) {\n')
        file.write('        var idCell = parseInt(rows[i].querySelectorAll("td")[0].textContent);\n')
        file.write('        var countCell = rows[i].querySelectorAll("td")[3];\n')
        file.write('        var nameCell = rows[i].querySelectorAll("td")[2].textContent;\n')
        file.write('        var showById = idCell >= minId && idCell <= maxId;\n')
        file.write('        var showByCount = filterValue === "" || nameCounts[nameCell] == filterValue;\n')
        file.write('        if (showById && showByCount) {\n')
        file.write('            countCell.textContent = "(" + nameCounts[nameCell] + ")";\n')
        file.write('            visibleRows.push(rows[i]);\n')
        file.write('        } else {\n')
        file.write('            rows[i].style.display = "none";\n')
        file.write('        }\n')
        file.write('    }\n')
        file.write('    for (var i = 0; i < visibleRows.length; i++) {\n')
        file.write('        visibleRows[i].style.display = "";\n')
        file.write('        if (i % 2 === 0) {\n')
        file.write('            visibleRows[i].style.backgroundColor = "#3e3e3e";\n')
        file.write('        } else {\n')
        file.write('            visibleRows[i].style.backgroundColor = "#2e2e2e";\n')
        file.write('        }\n')
        file.write('    }\n')
        file.write('}\n')
        file.write('function copyName(name) {\n')
        file.write('    navigator.clipboard.writeText(name);\n')
        file.write('    document.querySelectorAll("span.copyable").forEach(function(elem) {\n')
        file.write('        if (elem.textContent === name) {\n')
        file.write('            elem.parentNode.querySelector(".checked").style.visibility = "visible";\n')
        file.write('        }\n')
        file.write('    });\n')
        file.write('}\n')
        file.write('</script>\n')
        file.write('</head>\n')
        file.write('<body>\n')
        file.write('<a href="https://t.me/monejey" class="contact-link">–°–≤—è–∑–∞—Ç—å—Å—è: t.me/monejey</a>')
        file.write('<div class="header">BizChecker by Monejey</div>\n')
        file.write('<div class="filters">\n')
        file.write('<div>\n')
        file.write('<label for="filter">–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–∑–Ω–µ—Å–æ–≤:</label>\n')
        file.write('<select id="filter" onchange="applyFilters()">\n')
        file.write('<option value="">–í—Å–µ</option>\n')
        for count in sorted(set(name_counts.values())):
            file.write(f'<option value="{count}">{count}</option>\n')
        file.write('</select>\n')
        file.write('</div>\n')
        file.write('<div>\n')
        file.write('<label for="minId">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID:</label>\n')
        file.write('<input type="number" id="minId" name="minId" oninput="applyFilters()">\n')
        file.write('<label for="maxId">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID:</label>\n')
        file.write('<input type="number" id="maxId" name="maxId" oninput="applyFilters()">\n')
        file.write('</div>\n')
        file.write('</div>\n')
        file.write('<table>\n')
        file.write('<tr><th>–ù–æ–º–µ—Ä</th><th>–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞</th><th>–ù–∏–∫</th><th>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</th></tr>\n')
        for name, business_type, num in names_and_types:
            count = name_counts[name]
            file.write(f'<tr><td>{num}</td><td>{business_type}</td><td><span class="copyable" title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è" onclick="copyName(\'{name}\');">{name}</span><span class="checked">&#10003;</span></td><td>{count}</td></tr>\n')
        file.write('</table>\n')
        file.write('</body>\n')
        file.write('</html>\n')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {output_file}")
    return output_file

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async def send_file(chat_id, file_path):
    try:
        with open(file_path, 'rb') as file:
            bot.send_document(chat_id, file)
    except Exception as e:
        bot.send_message(chat_id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}')

# –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
def run_main_with_param(param, label, chat_id):
    asyncio.run(main(param, label, chat_id))

if __name__ == '__main__':
    bot.polling(none_stop=True)